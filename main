print(__doc__)

import numpy as np
import matplotlib.pyplot as plt
from sklearn import svm

xx, yy = np.meshgrid(np.linspace(-3, 3, 500),
                     np.linspace(-3, 3, 500))
# print(yy.shape)
# print(xx)
# print(xx.ravel())
# print("-----------------------")
# print(yy)
# print(yy.ravel())
# np.random.seed(0)
# Y = np.logical_xor(X[:, 0] > 0, X[:, 1] > 0)

X = np.array([[0,0],[0.9,0],[1.5,0.9],[-0.9,0],[0,-0.9],[0,1.1],[1.1,0],[0,-1.1],[-1.1,0],[1.2,0]])
Y = np.array([0]*5+[1]*5)
# print(Y)
# print(X)
# fit the model
clf = svm.SVC(C=5000)
clf.fit(X, Y)

# plot the decision function for each datapoint on the grid
Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])
# print(np.c_[xx.ravel(), yy.ravel()])
# print(xx.ravel())
Z = Z.reshape(xx.shape)
# print(Z.shape)
plt.imshow(Z, interpolation='nearest',
           extent=(xx.min(), xx.max(), yy.min(), yy.max()), aspect='auto',
           origin='lower', cmap=plt.cm.PuOr_r)
contours = plt.contour(xx, yy, Z, levels=[0], linewidths=2,
                       linetypes='--')
plt.scatter(X[:, 0], X[:, 1], s=30, c=Y, cmap=plt.cm.Paired,
            edgecolors='k')
# plt.xticks(())
# plt.yticks(())
# plt.axis([-3, 3, -3, 3])
plt.show()
